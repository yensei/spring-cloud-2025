services:
  # 1. SERVICIO DE CONFIGURACI√ìN 
  config-server:
    image: spring-config-server:latest # Tu imagen ya construida
    container_name: config-server
    ports:
      - "8888:8888"    
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - spring-cloud-network

  # 2. BASE DE DATOS POSTGRESQL 
  db-postgres:
    image: postgres:15-alpine
    container_name: db-postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      # Mantiene los datos persistentes incluso si el contenedor se reinicia
      - postgres_data:/var/lib/postgresql/data
      # Monta el script de inicializaci√≥n. Se ejecuta solo si el volumen de datos est√° vac√≠o.
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    networks:
      - spring-cloud-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d customerdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka-server:
    #image: eureka-server:latest # Crea la imagen de tu proyecto Eureka Server
    build: 
      context: ./eureka-server # Asume que el Microservicio est√° en una subcarpeta
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      # Opcional, para el Config Server, si es que Eureka tambi√©n lo usa
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888
    # Es crucial que el Config Server y el Discovery Server inicien antes que los clientes
    depends_on:
      config-server:
        condition: service_healthy # Aseg√∫rate que el CS est√© HEALTHY antes de iniciar
    networks:
      - spring-cloud-network

  # 3. MICROSERVICIO DE CLIENTES (Config Client)
  mcs-customer:
    build: 
      context: ./mcs-customers # Asume que el Microservicio est√° en una subcarpeta
      dockerfile: Dockerfile
    container_name: mcs-customers
    ports:
      - "8080:8080" # Mapeamos un puerto fijo para el acceso externo (API Gateway)
      - "5005:5005" # Para debugging
    volumes:
      # üöÄ NUEVO: Mapeo de la carpeta .m2-local a la carpeta .m2 del usuario root
      #- ./mcs-customers/mvn-settings.xml:/root/.m2/settings.xml:ro  # Usar :ro (read-only) es una buena pr√°ctica
      # ¬°ESTA ES LA MAGIA DEL HOT RELOAD!
      # Sincroniza las clases compiladas de tu PC con el classpath dentro del contenedor.
      - ./mcs-customers/target/classes:/app/BOOT-INF/classes
    environment:
      # Habilita el debug y el remote shutdown (necesario para Devtools)
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DEVTOOLS_RESTART_ENABLED: true 
      # Spring Cloud URI ya definido en bootstrap.yml, pero es bueno como fallback
      WAIT_HOSTS: db-postgres:5432,spring-config-server:8888 # Espera a que la BD y el CS est√©n listos (necesitar√°s una utilidad 'wait-for-it' o similar, o simplemente confiar en Docker Compose)      
      # Configuraci√≥n de debug remoto para Java
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      
    depends_on:
      config-server:
        condition: service_healthy # Aseg√∫rate que el CS est√© HEALTHY antes de iniciar
      db-postgres:
        condition: service_healthy # Aseg√∫rate que el CS est√© HEALTHY antes de iniciar
      eureka-server:
        condition: service_started # Espera a que Eureka haya iniciado para poder registrarse
    networks:
      - spring-cloud-network
  mcs-orders:
    build: 
      context: ./mcs-orders # Asume que el Microservicio est√° en una subcarpeta
      dockerfile: Dockerfile
    container_name: mcs-orders
    ports:
      - "8081:8081" # Mapeamos un puerto fijo para el acceso externo (API Gateway)      
    volumes:
      # üöÄ NUEVO: Mapeo de la carpeta .m2-local a la carpeta .m2 del usuario root
      #- ./mcs-customers/mvn-settings.xml:/root/.m2/settings.xml:ro  # Usar :ro (read-only) es una buena pr√°ctica
      # ¬°ESTA ES LA MAGIA DEL HOT RELOAD!
      # Sincroniza las clases compiladas de tu PC con el classpath dentro del contenedor.
      - ./mcs-orders/target/classes:/app/BOOT-INF/classes
    environment:
      # Habilita el debug y el remote shutdown (necesario para Devtools)
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DEVTOOLS_RESTART_ENABLED: true 
      # Spring Cloud URI ya definido en bootstrap.yml, pero es bueno como fallback
      WAIT_HOSTS: db-postgres:5432,spring-config-server:8888 # Espera a que la BD y el CS est√©n listos (necesitar√°s una utilidad 'wait-for-it' o similar, o simplemente confiar en Docker Compose)                  
    depends_on:
      config-server:
        condition: service_healthy # Aseg√∫rate que el CS est√© HEALTHY antes de iniciar
      db-postgres:
        condition: service_healthy # Aseg√∫rate que el CS est√© HEALTHY antes de iniciar
      eureka-server:
        condition: service_started # Espera a que Eureka haya iniciado para poder registrarse
    networks:
      - spring-cloud-network  

volumes:
  postgres_data:

# Definimos la red personalizada que usar√°n todos los servicios
networks:
  spring-cloud-network:
    driver: bridge