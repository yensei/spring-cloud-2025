version: '3.8'
services:
  # 1. SERVICIO DE CONFIGURACI√ìN 
  config-server:
    image: spring-config-server:latest # Tu imagen ya construida
    container_name: config-server
    ports:
      - "8888:8888"    
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 2. BASE DE DATOS POSTGRESQL 
  db-postgres:
    image: postgres:15-alpine
    container_name: db-postgres
    environment:
      POSTGRES_DB: customerdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      # Mantiene los datos persistentes incluso si el contenedor se reinicia
      - postgres_data:/var/lib/postgresql/data

  # 3. MICROSERVICIO DE CLIENTES (Config Client)
  mcs-customer:
    build: 
      context: ./mcs-customers # Asume que el Microservicio est√° en una subcarpeta
      dockerfile: Dockerfile
    container_name: mcs-customers
    ports:
      - "8080:8080" # Mapeamos un puerto fijo para el acceso externo (API Gateway)
      - "5005:5005" # Para debugging
    volumes:
      # üöÄ NUEVO: Mapeo de la carpeta .m2-local a la carpeta .m2 del usuario root
      #- ./mcs-customers/mvn-settings.xml:/root/.m2/settings.xml:ro  # Usar :ro (read-only) es una buena pr√°ctica
      # ¬°ESTA ES LA MAGIA DEL HOT RELOAD!
      # Sincroniza las clases compiladas de tu PC con el classpath dentro del contenedor.
      - ./mcs-customers/target/classes:/app/BOOT-INF/classes
    environment:
      # Habilita el debug y el remote shutdown (necesario para Devtools)
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DEVTOOLS_RESTART_ENABLED: true 
      # Spring Cloud URI ya definido en bootstrap.yml, pero es bueno como fallback
      WAIT_HOSTS: db-postgres:5432,spring-config-server:8888 # Espera a que la BD y el CS est√©n listos (necesitar√°s una utilidad 'wait-for-it' o similar, o simplemente confiar en Docker Compose)      
      # Configuraci√≥n de debug remoto para Java
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      
    depends_on:
      config-server:
        condition: service_healthy # Aseg√∫rate que el CS est√© HEALTHY antes de iniciar

volumes:
  postgres_data: