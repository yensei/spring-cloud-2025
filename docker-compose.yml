services:
  # 1. SERVICIO DE CONFIGURACIÓN 
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"    
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - spring-cloud-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 2. BASE DE DATOS POSTGRESQL 
  db-postgres:
    image: postgres:15-alpine
    container_name: db-postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      # Mantiene los datos persistentes incluso si el contenedor se reinicia
      - postgres_data:/var/lib/postgresql/data
      # Monta el script de inicialización. Se ejecuta solo si el volumen de datos está vacío.
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    networks:
      - spring-cloud-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
# 3. DESCUBRIR NUEVOS COMPONENTES (Eureka Server)
  eureka-server:
    build: 
      context: ./eureka-server # Asume que el Microservicio está en una subcarpeta
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    # Es crucial que el Config Server y el Discovery Server inicien antes que los clientes
    environment:
      # Opcional, para el Config Server, si es que Eureka también lo usa
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888
    depends_on:
      config-server:
        condition: service_healthy # Asegúrate que el CS esté HEALTHY antes de iniciar
    networks:
      - spring-cloud-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 4. MICROSERVICIOs 
  mcs-customers:
    build: 
      context: ./mcs-customers # Asume que el Microservicio está en una subcarpeta
      dockerfile: Dockerfile
    container_name: mcs-customers
    ports:
      - "8080:8080" # Mapeamos un puerto fijo para el acceso externo (API Gateway)
      - "5005:5005" # Para debugging
    volumes:
      # ¡ESTA ES LA MAGIA DEL HOT RELOAD!
      # Sincroniza las clases compiladas de tu PC con el classpath dentro del contenedor.
      - ./mcs-customers/target/classes:/app/BOOT-INF/classes
    environment:
      # Habilita el debug y el remote shutdown (necesario para Devtools)
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DEVTOOLS_RESTART_ENABLED: true 
      # Spring Cloud URI ya definido en bootstrap.yml, pero es bueno como fallback
      WAIT_HOSTS: db-postgres:5432,spring-config-server:8888 # Espera a que la BD y el CS estén listos (necesitarás una utilidad 'wait-for-it' o similar, o simplemente confiar en Docker Compose)      
      # Configuración de debug remoto para Java
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      
    depends_on:      
      config-server:
        condition: service_healthy # Asegúrate que el CS esté HEALTHY antes de iniciar
      db-postgres:
        condition: service_healthy # Asegúrate que el CS esté HEALTHY antes de iniciar
      eureka-server:
        condition: service_started # Espera a que Eureka haya iniciado para poder registrarse
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    # Permite que el contenedor resuelva 'keycloak.local' a la IP del host de Docker
    extra_hosts:
      - "keycloak.local:host-gateway"
    networks:
      - spring-cloud-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mcs-orders:
    build: 
      context: ./mcs-orders # Asume que el Microservicio está en una subcarpeta
      dockerfile: Dockerfile
    container_name: mcs-orders
    ports:
      - "8081:8081" # Mapeamos un puerto fijo para el acceso externo (API Gateway)      
    volumes:
      # ¡ESTA ES LA MAGIA DEL HOT RELOAD!
      # Sincroniza las clases compiladas de tu PC con el classpath dentro del contenedor.
      - ./mcs-orders/target/classes:/app/BOOT-INF/classes
    environment:
      # Habilita el debug y el remote shutdown (necesario para Devtools)
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DEVTOOLS_RESTART_ENABLED: true 
      # Spring Cloud URI ya definido en bootstrap.yml, pero es bueno como fallback
      WAIT_HOSTS: db-postgres:5432,spring-config-server:8888 # Espera a que la BD y el CS estén listos (necesitarás una utilidad 'wait-for-it' o similar, o simplemente confiar en Docker Compose)                  
    depends_on:      
      config-server:
        condition: service_healthy # Asegúrate que el CS esté HEALTHY antes de iniciar
      db-postgres:
        condition: service_healthy # Asegúrate que el CS esté HEALTHY antes de iniciar
      eureka-server:
        condition: service_started # Espera a que Eureka haya iniciado para poder registrarse
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    # Permite que el contenedor resuelva 'keycloak.local' a la IP del host de Docker
    extra_hosts:
      - "keycloak.local:host-gateway"
    networks:
      - spring-cloud-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mcs-notifications:
    build:
      context: ./mcs-notifications
      dockerfile: Dockerfile
    container_name: mcs-notifications
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - spring-cloud-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  # 5. API GATEWAY
  gateway-server:
    build:
      context: ./gateway-server
      dockerfile: Dockerfile
    container_name: gateway-server
    ports:
      - "8090:8090"
    environment:
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_started
      keycloak:
        condition: service_healthy
    # Permite que el contenedor resuelva 'keycloak.local' a la IP del host de Docker
    extra_hosts:
      - "keycloak.local:host-gateway"
    networks:
      - spring-cloud-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 6. SERVIDOR DE AUTORIZACIÓN KEYCLOAK
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.4
    container_name: keycloak
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: db-postgres
      KC_DB_URL_DATABASE: keycloakdb
      KC_DB_USERNAME: user
      KC_DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      # Define la URL pública de Keycloak usando el nuevo hostname
      KC_HOSTNAME_URL: http://keycloak.local:9990
    ports:
      - "9990:8080" # Mapeamos el puerto 8080 de Keycloak al 9990 de nuestro host
    depends_on:
      db-postgres:
        condition: service_healthy
    networks:
      - spring-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 6. STACK DE MONITOREO
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - spring-cloud-network

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      # Puedes agregar dashboards pre-configurados en esta carpeta
      # - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
      - loki
    networks:
      - spring-cloud-network

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
    networks:
      - spring-cloud-network

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml
    networks:
      - spring-cloud-network
  
  # 7. STACK DE MENSAJERÍA KAFKA
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring-cloud-network

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - spring-cloud-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:

# Definimos la red personalizada que usarán todos los servicios
networks:
  spring-cloud-network:
    driver: bridge